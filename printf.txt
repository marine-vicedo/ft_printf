printf

Man
#include <stdio.h>

int printf(const char *format, ...)

Les fonctions de la famille printf() produisent des sorties en accord avec le format décrit plus bas. Les fonctions printf() et vprintf() écrivent leur sortie sur stdout.

Utilise un nombre variable d'arguments

valeur renvoyee : longueur de la chaine sans le '\0'. Si erreur de sortie, une valeur negative est renvoyee. (-1)
(utiliser malloc ? pas forcement)

Chaine de format :
specification de conversion = % + indicateur de conversion (csdiupxX%)

d = chiffre decimal signe base 10. argument int
i = chiffre entier signe base 10. argument int
u = chiffre decimal non signe. argument unsigned int
x = chiffre hexadecimal base 16 non signe. argument unsigned int. x = minuscule && X = majuscule
c = affiche un seul caractere = valeur ascii d'un nombre. argument int converti en unsigned char.
s = affiche une chaine de caracteres. argument de type const char * = pointeur sur une chaine. les caracteres sont ecrits jusqu'a l'octet '\0'

fonctionnement printf
Itere et copie chaque caractere de la chaine de sortie. s'arrete lorsqu'il rencontre un % et commence la conversion. Si l'argument est une chaine,il fait une copie de la chaine

les fonctions variadiques

va_start (args, last)
last correspond au dernier argument (ou unique argument) passe en parametre.
exemple : 
void  prints (int num, ..)
{
	va_list args;
	va_start(args, num);
}

va_start initialise la va_list args, nous permet de commencer à parcourir la liste d'arguments passés à notre fonction ;

function contains the code to initialize the va_list with the correct stack pointer. It must be passed the last named argument in the function declaration or it will not work. Requires the last fixed parameter (to get the address)

va_arg (args, type)
qui nous permet de récupérer un argument de cette liste à chaque appel - get the next variadic function argument
uses this saved stack pointer and extract the correct amount of bytes for the type provided, and then modify args so it points to the next argument on the stack.

va_end (args) 
holds to pointer to the end of the stack

functions (va_start, va_arg and va_end) are implemented as preprocessor macros. The actual implementation also depends on the compiler, as different compilers can have different layout of the stack and how it pushes arguments on the stack.

Now printf iterates through each characters of user string and copies the character to the output string. Printf only stops at %. % means there is an argument to convert. Arguments are in the form of char, int, long, float, double or string. It converts it to string and appends to output buffer. If the argument is string then it does a string copy
